// Generated by CoffeeScript 1.6.3
var global, helper, viz;

console.warn('hello');

global = {
  wI: window.innerWidth,
  hI: window.innerHeight,
  w: window.innerWidth,
  h: window.innerHeight,
  svgEl: null,
  container: null,
  svgInit: function() {
    this.svgEl = d3.select('body').append('svg').attr({
      width: global.w,
      height: global.h
    }).style('background', '#e3e3e3');
    return this.container = global.svgEl.append('g').attr({
      transform: 'translate(' + global.w / 2 + ', ' + global.h / 2 + ')'
    });
  },
  svgResize: function() {
    return this.svgEl = d3.select('svg').attr({
      width: global.w,
      height: global.h
    });
  },
  resize: function() {
    return window.addEventListener('resize', function() {
      global.w = window.innerWidth;
      global.h = window.innerHeight;
      return global.svgResize();
    });
  },
  demoArray: {
    x: 100,
    y: 100,
    w: 5,
    h: 200,
    c: '#f00'
  },
  demoArray2: {
    x: 100,
    y: 100,
    w: 20,
    h: 200,
    c: '#f00'
  }
};

viz = {
  rectCreate: function(d) {
    global.container.append('rect').attr({
      "class": 'bar',
      x: d.x,
      y: d.y,
      width: d.w,
      height: d.h,
      transform: 'rotate(0)'
    });
    return false;
  },
  lineCreate: function(hour, minute, visitor) {
    return global.container.append('line').attr({
      "class": 'bar',
      x1: function() {
        return 50 * Math.cos(helper.degreeToRadian(hour * 30 + minute * 0.5));
      },
      x2: function() {
        return 50 * Math.cos(helper.degreeToRadian(hour * 30 + minute * 0.5)) + visitor / 2 * Math.cos(helper.degreeToRadian(hour * 30 + minute * 0.5));
      },
      y1: function() {
        return 50 * Math.sin(helper.degreeToRadian(hour * 30 + minute * 0.5));
      },
      y2: function() {
        return 50 * Math.sin(helper.degreeToRadian(hour * 30 + minute * 0.5)) + visitor / 2 * Math.sin(helper.degreeToRadian(hour * 30 + minute * 0.5));
      }
    });
  },
  pathCreate: function(data) {
    return global.svgEl.append('path').attr({
      d: viz.pathFn(data),
      stroke: data.c,
      'stroke-width': data.w,
      fill: data.f
    });
  },
  pathFn: function(data) {
    var fn;
    return fn = d3.svg.line().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    }).interpolate('linear');
  }
};

helper = {
  timeToAngle: function(d) {
    console.log(d);
    return false;
  },
  degreeToRadian: function(degree) {
    return (degree - 90) * Math.PI / 180;
  }
};

global.svgInit();

global.resize();

viz.lineCreate(3, 30, 200);

/*
This is how you comment I guess
*/

